/*
    Copyright (c) 2013, <copyright holder> <email>
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
        * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
        * Neither the name of the <organization> nor the
        names of its contributors may be used to endorse or promote products
        derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY <copyright holder> <email> ''AS IS'' AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL <copyright holder> <email> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#ifndef ABSNETWORKINTERFACE_H_
#define ABSNETWORKINTERFACE_H_

#include <stdint.h>
#include <sys/types.h>
#include <unistd.h>

#include <exception>
#include <map>
#include <sstream>
#include <string>
#include <vector>

#include "callback.h"

using namespace std;

namespace sim_comm {

/* forward declarations */
class Message;


/**
 * Generic excpetion generated by the network.
 */
class NetworkException : public exception {
public:
    NetworkException(
            const char *file,
            const char *func,
            int line,
            const char *description) throw () {
        ostringstream s;
        s << "[" << getpid() << "] " << file << ":" << line << ":" << func
            << ": Exception `" << description << "'" << endl;
        this->message = s.str();
    }
    ~NetworkException() throw() {}
    virtual const char* what() const throw() {
        return message.c_str();
    }
private:
    string message;
};

/* for brevity */
#define NETWORK_EXCEPTION(DESC) \
    throw NetworkException(__FILE__,__func__,__LINE__,(DESC))


class AbsNetworkInterface {
protected:
    vector<string> myObjects;
    bool registrationsAreFinalized;
    CallBack<void,Message*,empty,empty,empty> *messageCallBack;
    bool canFork,killOnTerm;
    virtual void notifyFork() = 0;
public:
    /**
     * Constructs.
     */
    AbsNetworkInterface(bool forkCapable=false);

    /**
     * Child classes should provide a copy constructor
     * for creating a new context (from the existing context)
     */
    AbsNetworkInterface(const AbsNetworkInterface &that);
    /**
     * Destroys.
     */
    virtual ~AbsNetworkInterface();

    /**
     * Injects a message into the network.
     *
     * @param[in] message the Message instance
     * @throw NetworkException if the send operation fails
     */
    virtual void send(Message *message) =0;

    /**
     * Sends the message to every network endpoint.
     *
     * @param[in] message the Message instance
     * @throw NetworkException if the send operation fails
     */
    virtual uint64_t broadcast(Message *message) =0;

    /**
     * Returns the first available Message, or NULL.
     *
     * This method is for callers which actively pull Message instances from
     * the network, as opposed to registering a callback function when a
     * Message arrives.
     *
     * @throw NetworkException if the receive operation fails
     * @return the Message instance, or NULL
     */
    virtual Message* receive() =0;

    /**
     * Returns all available messages.
     *
     * This method is for callers which actively pull Message instances from
     * the network, as opposed to registering a callback function when a
     * Message arrives.
     *
     * @throw NetworkException if the receive operation fails
     * @return all Message instances, or an empty vector
     */
    virtual vector<Message*> receiveAll();

    /**
     * Registers a callback function to invoke when a Message is received.
     */
    void setMessageCallBack(CallBack<void,Message*,empty,empty,empty> *messageCallBack) {
        this->messageCallBack = messageCallBack;
    }

    /**
     * Reduces min time operation.
     *
     * @throw NetworkException when the reduce operation fails
     * @return the min time
     */
    virtual uint64_t reduceMinTime(uint64_t myTime) =0;

    /**
     * Reduces min time operation with message-was-sent notification.
     *
     * @throw NetworkException when the reduce operation fails
     * @return the min time
     */
    virtual uint64_t reduceMinTimeAndSleep(uint64_t myTime, bool hadMessage) =0;

    /**
     * Aggregate reduce operation used for reduction of the
     * next time step and parent process action. This operation
     * is used by the optimistic algorithm.
     *
     * @throw NetworkException when the reduce operation fails
     * @param timeAction an array of 2 elements, [0] is next time, [1] is action
     * @return pointer to timeAction array with [0] the min next time, [1] the min action
     */
    virtual uint64_t* reduceMinTimeAndAction(uint64_t *timeAction) =0;

    /**
     * Reduces total sent and received counts.
     *
     * @throw NetworkException when the reduce operation fails
     */
    virtual uint64_t reduceTotalSendReceive(uint64_t sent, uint64_t received) =0;

    /**
     * Registers an object for Message delivery.
     *
     * @param[in] name TODO
     * @param[in] object TODO
     */
    virtual void registerObject(string name);

    /**
     * Indicates that communication object registrations have completed.
     *
     * This method is collective across all AbsNetworkInterface instances in
     * order to efficiently exchange metadata.
     */
    virtual void finalizeRegistrations();

    /**
     * Indicates that registrations have been completed.
     */
    inline bool isAcceptingRegistrations() {
        return !this->registrationsAreFinalized;
    }
    
    /**
     * Barier function.
     */
    virtual void barier() =0;
    
    /**
     * Sleep function.
     */
    virtual bool sleep() =0;
    
    /**
     * Used for gathering the next times of the
     * simulators.
     */
    virtual uint64_t* getNextTimes(uint64_t nextTime,uint32_t &worldSize) =0;
    
    /**
     * Duplicates the current interfce, creates a new interface that
     * has the same connections as the previous.
     */
    virtual AbsNetworkInterface* duplicateInterface() =0;

    /**
     * Signals that we are finished.
     */
    virtual void sendFinishedSignal();
    
    /**
     * Clean up function
     */
    virtual void cleanup() = 0;
    
    /**
     * Send notification to other processes in the
     * context, the failed signal.
     */
    virtual void sendFailed() =0;
    
    /**
     * Send notification to other processes in the context
     * a succeed signal.
     */
    virtual void sendSuceed() =0;
    
    /**
     * Returns true if this instance of networkinterface 
     * works with forks.
     */
    bool supportsFork(){ return this->canFork; }
    
    /**
     * Prepares the networkinterface for fork.
     * Throws expcetion if interface does not support forking.
     */
    void prepareFork();
    
    /**
     * Blocks the execution, used by sync algorithms
     * to block execution until a signal is received
     */
    virtual void block() =0;
    
    /**
     * Defines the behavior on term signal
     * True - kill all simulators, the interface instance will terminate all others
     * False - only the current instance is terminated.
     */
    void setKillOnTerm(bool state=true);
    
    /**
     * Returns true if the interface is set to kill the co-simulation on term
     * False if it only terminates the current process.
     */
    bool doKillOnTerm() { return this->killOnTerm; }
};

} /* end namespace sim_comm */

#endif /* ABSNETWORKINTERFACE_H_ */
